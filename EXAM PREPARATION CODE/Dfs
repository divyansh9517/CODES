#include <bits/stdc++.h>
using namespace std;

void dfs(int node, unordered_map<int, bool>& visited, unordered_map<int, list<int>>& adj, vector<int>& component) {
    component.push_back(node);
    visited[node] = true;

    for (auto i : adj[node]) {
        if (!visited[i]) {
            dfs(i, visited, adj, component); // Fixed the call to dfs to use 'i' instead of 'node'
        }
    }
}

vector<vector<int>> depthFirstSearch(int v, int e, vector<vector<int>>& edges) {
    unordered_map<int, list<int>> adj;

    for (int i = 0; i < edges.size(); i++) {
        int u = edges[i][0];
        int v = edges[i][1];

        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    vector<vector<int>> ans;
    unordered_map<int, bool> visited;

    for (int i = 0; i < v; i++) {
        if (!visited[i]) {
            vector<int> component;
            dfs(i, visited, adj, component); // Fixed the function name from 'def' to 'dfs'
            ans.push_back(component);
        }
    }
    return ans;
}

int main() {
    int v, e;
    cout << "Enter the number of vertices: ";
    cin >> v;
    cout << "Enter the number of edges: ";
    cin >> e;

    vector<vector<int>> edges(e, vector<int>(2));
    cout << "Enter the edges (u v):" << endl;
    for (int i = 0; i < e; i++) {
        cin >> edges[i][0] >> edges[i][1];
    }

    vector<vector<int>> components = depthFirstSearch(v, e, edges);

    cout << "Connected components in the graph:" << endl;
    for (const auto& component : components) {
        for (int node : component) {
            cout << node << " ";
        }
        cout << endl;
    }

    return 0;
}